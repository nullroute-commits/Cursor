version: '3.8'

# Production Docker Compose configuration
# Last updated: 2025-08-30 22:40:55 UTC by nullroute-commits

services:
  web:
    extends:
      file: docker-compose.base.yml
      service: web
    build:
      target: production
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DEBUG=False
    env_file:
      - environments/.env.production.example
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        gunicorn --bind 0.0.0.0:8000 --workers 4 --worker-class sync --max-requests 1000 --timeout 30 config.wsgi:application
      "

  db:
    extends:
      file: docker-compose.base.yml
      service: db
    environment:
      - POSTGRES_DB=django_app_prod
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=512MB
      -c work_mem=8MB
      -c maintenance_work_mem=128MB
      -c effective_cache_size=2GB
      -c wal_buffers=32MB
      -c checkpoint_completion_target=0.9
      -c random_page_cost=1.1

  memcached:
    extends:
      file: docker-compose.base.yml
      service: memcached
    command: memcached -m 256 -c 2048 -t 8
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  rabbitmq:
    extends:
      file: docker-compose.base.yml
      service: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  nginx:
    extends:
      file: docker-compose.base.yml
      service: nginx
    ports:
      - "80:80"
      - "443:443"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Log aggregation
  fluentd:
    image: fluent/fluentd:v1.16-1
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    volumes:
      - logs_volume:/app/logs
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf
    ports:
      - "24224:24224"
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:
  static_volume:
  media_volume:
  logs_volume:
  prometheus_data: